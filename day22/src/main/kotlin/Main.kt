import java.io.File
import kotlin.comparisons.compareBy
import kotlin.comparisons.thenBy

class Main {

  companion object {

    @JvmStatic fun main(args: Array<String>) {
      val inputFile = File(Main::class.java.getResource("input.txt").file)

      val sortedNodes = inputFile
          .readLines()
          .map { line -> Node.parse(line) }
          .sortedWith(compareBy(selector = Node::y).thenBy(selector = Node::x))

      val viableNodes = mutableSetOf<Node>()

      for (aCandidateNode in sortedNodes) {
        @Suppress("LoopToCallChain")
        for (bCandidateNode in sortedNodes) {
          if (aCandidateNode != bCandidateNode &&
              aCandidateNode.used > 0 &&
              aCandidateNode.used < bCandidateNode.avail) {

            viableNodes.add(aCandidateNode)
          }
        }
      }

      println("Part 1: ${viableNodes.size}")

      /*
       * Based on the suggestions in part 2 of the problem statement, printing the map using the rules below is an
       * obvious first step, which then leads to a simple solution by hand.
       */

      val xMax = sortedNodes.map(Node::x).max()!!

      for (node in sortedNodes) {
        if (node.x == 0) {
          print("\n")
        }

        when {
          node.x == 0 && node.y == 0 -> print('A')    // The node whose data we can read.
          node.x == xMax && node.y == 0 -> print('G') // The node whose data we want to read.
          node.used == 0 -> print('_')                // _The_ empty node.
          viableNodes.contains(node) -> print('.')    // Nodes that are viable, i.e. into which we can move data.
          else -> print('#')                          // Nodes that are not viable, i.e. into which we cannot move data.
        }
      }

      /*
       * The initial map produced is as follows:
       *
       *   A..............................G
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   .........#######################
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ........................_.......
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *
       * It takes 9 (up) + 16 (left) + 2 (up) + 22 (right) + 11 (up) = 60 swaps to reach this position:
       *
       *   A............................._G
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   .........#######################
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *
       *   It takes 5 further steps to reach this position:
       *
       *   A............................_G.
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   .........#######################
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *
       *   Repeating those last first steps 29 more times allows us to reach this position:
       *
       *   _G..............................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   .........#######################
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *   ................................
       *
       *   One final move shifts G into the accessible (top left) position.
       *
       *   This is achieved in a total of 60 + (30 * 5) + 1 = 211 steps!
       *
       */
    }
  }

}
